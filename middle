using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Text;
using Serilog;
using Serilog.Events;
using Microsoft.AspNetCore.Http.Features;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using System.IO;
using System.Net;

namespace LogLogging
{
    public class SerilogRequestResponseLoggingMiddleware
    {
        static readonly ILogger Log = Serilog.Log.ForContext<SerilogRequestResponseLoggingMiddleware>();
        private readonly RequestDelegate _next;
        private readonly ICILogger _cILogger;
        public SerilogRequestResponseLoggingMiddleware(RequestDelegate next, ICILogger cILogger)
        {
            _next = next ?? throw new ArgumentNullException(nameof(next));
            _cILogger = cILogger;
        }
        public async Task Invoke(HttpContext httpContext)
        {
            if (httpContext == null) throw new ArgumentNullException(nameof(httpContext));
            var sw = Stopwatch.StartNew();
            var request = await FormatRequest(httpContext.Request);
            var originalBodyStream = httpContext.Response.Body;

            // var start = Stopwatch.GetTimestamp();
            using (var bodyStream = new MemoryStream())
            {
                try
                {
                    httpContext.Response.Body = bodyStream;
                    await _next.Invoke(httpContext);

                    httpContext.Response.Body = originalBodyStream;
                    var bodyAsText = await FormatResponse(bodyStream);
                    await bodyStream.CopyToAsync(originalBodyStream);
                }
                catch (Exception ex)
                {
                    await HandlerExceptionAsync(httpContext, ex);
                    bodyStream.Seek(0, SeekOrigin.Begin);
                    await bodyStream.CopyToAsync(originalBodyStream);
                }
                finally
                {
                    sw.Stop();
                    LogModel logModel = new LogModel()
                    {
                        Host = System.Environment.MachineName,
                        Message = $@"Request: {request} Respond with [{httpContext.Response.StatusCode}] in {sw.ElapsedMilliseconds}ms",
                        User = httpContext.User.FindFirst("id")?.Value,


                    };
                    _cILogger.LogInformation(logModel);
                }
            }

        }
        private async Task<string> FormatRequest(HttpRequest request)
        {
            request.EnableBuffering();
            var buffer = new byte[Convert.ToInt32(request.ContentLength)];
            await request.Body.ReadAsync(buffer, 0, buffer.Length);
            var bodyAsText = Encoding.UTF8.GetString(buffer);
            request.Body.Seek(0, SeekOrigin.Begin);
            return $"{request.Method}{request.Scheme}{request.Host} {request.Path} {request.QueryString} {bodyAsText}";
        }

        private async Task<string> FormatResponse(Stream bodyStream)
        {
            bodyStream.Seek(0, SeekOrigin.Begin);
            var plainBodyText = await new StreamReader(bodyStream).ReadToEndAsync();
            bodyStream.Seek(0, SeekOrigin.Begin);
            return plainBodyText;
        }

        private async Task HandlerExceptionAsync(HttpContext context, System.Exception exception)
        {
            HttpStatusCode httpStatusCode = (exception as WebException != null &&
                ((HttpWebResponse)(exception as WebException).Response) != null) ?
                ((HttpWebResponse)(exception as WebException).Response).StatusCode : GetErrorCode(exception.GetType());
            int code = (int)httpStatusCode;
            var exceptionMessage = exception.Message;
            var msg = $"{exceptionMessage} {exception.GetBaseException().Message}";

            ExceptionModel exceptionModel = new ExceptionModel()
            {
                Host = System.Environment.MachineName,
                Message = $"[{code}] : {exceptionMessage}",
                ExceptionDetail = exception,
                Statuscode = code,
                Source = context.Request.Path,
                User = context.User.FindFirst("id")?.Value,

            };
            _cILogger.LogError(exceptionModel);
        }

        private HttpStatusCode GetErrorCode(Type extype)
        {
            Exceptions tryParseResult;
            if (Enum.TryParse<Exceptions>(extype.Name, out tryParseResult))
            {
                switch (tryParseResult)
                {
                    case Exceptions.NuNullReferenceException:
                        return HttpStatusCode.LengthRequired;
                    case Exceptions.FileNotFoundException:
                        return HttpStatusCode.NotFound;
                    case Exceptions.OverflowException:
                        return HttpStatusCode.RequestedRangeNotSatisfiable;
                    case Exceptions.OutOfMemoryException:
                        return HttpStatusCode.ExpectationFailed;
                    case Exceptions.InvalidCastException:
                        return HttpStatusCode.PreconditionFailed;
                    case Exceptions.ObjectDisposedException:
                        return HttpStatusCode.Gone;
                    case Exceptions.UnauthorizedAccessException:
                        return HttpStatusCode.Unauthorized;
                    case Exceptions.NotImplementedException:
                        return HttpStatusCode.NotImplemented;
                    case Exceptions.NotSupportedException:
                        return HttpStatusCode.NotAcceptable;
                    case Exceptions.InvalidOperationException:
                        return HttpStatusCode.MethodNotAllowed;
                    case Exceptions.TimeoutException:
                        return HttpStatusCode.RequestTimeout;
                    case Exceptions.ArgumentException:
                        return HttpStatusCode.BadRequest;
                    case Exceptions.StackOverflowException:
                        return HttpStatusCode.RequestedRangeNotSatisfiable;
                    case Exceptions.FormatException:
                        return HttpStatusCode.UnsupportedMediaType;
                    case Exceptions.IOException:
                        return HttpStatusCode.NotFound;
                    case Exceptions.IndexOutOfRangeException:
                        return HttpStatusCode.ExpectationFailed;

                    default:
                        return HttpStatusCode.InternalServerError;

                }
            }
            else
            {
                return HttpStatusCode.InternalServerError;
            }
        }


        // Extension Method
        //    public static class Extensions
        //{
        //    public static IApplicationBuilder SerilogRequestResponseMiddleware(this IApplicationBuilder builder)
        //    {
        //        return builder.UseMiddleware<SerilogRequestResponseLoggingMiddleware>();
        //    }
        //}

    }   
}
===================

using System;
using System.Collections.Generic;
using System.Text;

namespace LogLogging
{
    public class LogModel
    {
        public string Message { get; set; }
        public string User { get; set; }
        public string Host { get; set; }
        public string Source { get; set; }
       // public string CorellationId { get; set; }

    }

    public class ExceptionModel
    {
        public string Message { get; set; }
        public string User { get; set; }
        public string Host { get; set; }
        public string Source { get; set; }
        public int Statuscode { get; set; }
       // public string CorellationId { get; set; }
        public Exception ExceptionDetail { get; set; }
      //  public string PropertyValues { get; set; }

    }

    public enum Exceptions
    {
        NuNullReferenceException = 1,
        FileNotFoundException =2,
        OverflowException = 3,
        OutOfMemoryException = 4,
        InvalidCastException=5,
        ObjectDisposedException =6,
        UnauthorizedAccessException =7,
        NotImplementedException = 8,
        NotSupportedException = 9,
        InvalidOperationException= 10,
        TimeoutException = 11,
        ArgumentException = 12,
        FormatException=13,
        StackOverflowException=14,
        SqlExcetion = 15,
        IndexOutOfRangeException = 16,
        IOException = 17
    }
}
